from prompt_builder import PromptBuilder
from llm_model import LLMModel, OpenAIModel 

class QuestionPrerequisite:
    def __init__(self, model: LLMModel):
        """
        Initializes the QuestionPrerequisite with a specified model.

        Args:
            model: An instance of a language model (e.g., OpenAIModel).
        """
        self.model = model
        self.prompt_builder = PromptBuilder()

# This is a single-line comment

    def question_prerequisites(self, question: str, options: list[str]) -> list[str]:
        """
        Generates prerequisites for a given question based on provided options.

        Args:
            question (str): The question for which prerequisites are to be generated.
            options (list[str]): A list of answer options related to the question.

        Returns:
            list[str]: A list of prerequisite strings generated by the model.

        Raises:
            RuntimeError: If prompt generation or model response retrieval fails.
            ValueError: If the response is not a list of strings.
        """
        try:
            prompt = self.prompt_builder.get_prerequisites_prompt(question, options)
        except Exception as e:
            raise RuntimeError(f"Failed to generate prompt: {e}")
        
        try:
            response = self.model.get_response([{"role": "user", "content": prompt}])
        except Exception as e:
            raise RuntimeError(f"Failed to get response from model: {e}")
        
        # Improved error handling for response
        if not isinstance(response, list) or not all(isinstance(msg, str) for msg in response):
            raise ValueError("Expected response to be a list of strings.")
        
        message_contents = response  # Directly assign if it's a list

        return message_contents  # Return the message contents

if __name__ == "__main__":
    model = OpenAIModel()
    question_prerequisite = QuestionPrerequisite(model)
    
    question = "What is the unit of force?"
    options = ["A) Joule", "B) Newton", "C) Pascal", "D) Watt"] 
    response = question_prerequisite.question_prerequisites(question, options)
    print(response)
